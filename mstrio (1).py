#!/usr/bin/env python
# coding: utf-8

# In[ ]:


# IMPORTANT: This cell was generated by MicroStrategy for Jupyter.
# To ensure full functionality, please install the latest add-in version.
# (https://community.microstrategy.com/s/products)

# Import from MicroStrategy
# Cell Creation Date: 01/13/2023 01:00:09 PM
# Object Name: vk_test_report
# MicroStrategy_Tutorial/Public Objects/Reports/Rubi


# In[ ]:


# IMPORTANT: This cell was generated by MicroStrategy for Jupyter.
# To ensure full functionality, please install the latest add-in version.
# (https://community.microstrategy.com/s/products)

# Import from MicroStrategy
# Cell Creation Date: 01/03/2023 06:36:00 PM
# Object Name: 10 View Filter
# MicroStrategy_Tutorial/Public Objects/Reports/MicroStrategy Platform Capabilities/Advanced Reporting Guide


# In[1]:


import mstrio


# In[2]:


from mstrio.connection import Connection
from getpass import getpass   #for adding password 


BASE_URL = "http://nicess-lp295:8080/MicroStrategyLibrary/"     #for linking environment and jupyter
MSTR_USERNAME = "administrator"  # Insert your env username here
MSTR_PASSWORD = getpass("Password:")  # insert your mstr password here
PROJECT_ID = "B19DEDCC11D4E0EFC000EB9495D0F44F"  # Insert you project ID here


conn = Connection(BASE_URL, MSTR_USERNAME, MSTR_PASSWORD, project_id=PROJECT_ID)
conn.status()

#conn = Connection(BASE_URL, MSTR_USERNAME, MSTR_PASSWORD, project_id=PROJECT_ID,login_mode=1)login_mode=1====standard,16===ldap,guest===8
# type of object === 55 is document/dossier and 3 is report/cube


# In[97]:


conn.login_mode


# In[63]:


# to check the username of user
conn.username


# In[13]:


#To see all users in project
from mstrio.users_and_groups import list_user_groups,UserGroup,User,list_users
list_users(conn)


# In[64]:


#To see all user Groups
list_user_groups(conn)


# In[67]:


#To see the user By ID
myuser=User(conn,id="85A05F10986F11D48CD100B0D02A75D0")


# In[69]:


#To see the user By Name
myuser=User(conn,name="William Jackson")


# In[31]:


import inspect


# In[14]:


#User with same login name already exists
Myuser=User.create(conn,username="Vaish",full_name="Vaishnavi Kalbande")


# In[15]:


from mstrio.users_and_groups import list_user_groups,UserGroup,User,list_users
list_users(conn)


# In[90]:


#Changing username and Full name of User
Myuser.alter(username="Ruchiru",full_name="Ruchiru B",password="Hey")


# In[89]:


inspect.signature(User.alter)


# In[88]:


#To check the changes which we did in above alter statement
list_users(conn)


# In[ ]:





# In[93]:


from mstrio.utils.entity import Entity
print(Entity.__doc__)


# In[82]:


from mstrio.users_and_groups import list_user_groups,UserGroup,User,list_users
list_users(conn)


# In[80]:


Myuser.delete


# In[94]:


#Deleting User from Project
Myuser.delete(True)


# In[96]:


#To check with user still exists
list_users(conn)


# In[85]:


print(Myuser.delete.__doc__)


# In[95]:


list_users(conn)


# In[83]:


from mstrio.users_and_groups import list_user_groups,UserGroup,User,list_users
list_users(conn)


# In[81]:


#We cannot see properties or settings of a user or anything because of the REST API Functionality which is not supported in version 11.2 and our mstrio-py package version is 11.3.5
Myuser.list_properties()


# In[11]:


conn.close()    #closing the connection which we establihed with intelligent server


# In[3]:


from mstrio.project_objects import  Report     #importing the report
from mstrio.connection import get_connection


my_report = Report(connection=conn, id="907AB28E4A93F80D71EBF7A0B259B5F6", parallel=False)


df=my_report.to_dataframe()
df


# In[2]:


pip install pandas


# In[16]:


#creating attributes and metrics and adding to the report(Creating the dataset)
#category,sales_fmt and location are attributes and store_id,sales are metrics
#store and sales are tables 

import pandas as pd
stores = {"store_id": [1, 2, 3],
          "location": ["New York", "Seattle", "Los Angeles"]}
stores_df = pd.DataFrame(stores, columns=["store_id", "location"])

sales = {"store_id": [1, 2, 3],
         "category": ["TV", "Books", "Accessories"],
         "sales": [400, 200, 100],
         "sales_fmt": ["$400", "$200", "$100"]}
sales_df = pd.DataFrame(sales, columns=["store_id", "category", "sales", "sales_fmt"])

from mstrio.project_objects import SuperCube
ds =  SuperCube(connection=conn, name="mstrio cube_1")
ds.add_table(name="Stores",data_frame=stores_df, update_policy="add")  #update policy==add,update,replace,upsert(simultaneously
#updates existing data and add new data)
ds.add_table(name="Sales", data_frame=sales_df, update_policy="add")
ds.create()  #creates super cube

# adding data in report is not possible
# https://www.geeksforgeeks.org/python-pandas-dataframe/


# In[18]:


from mstrio.project_objects import SuperCube
ds = SuperCube(connection=conn, id="6D3244C0457C3CC8D541F4B597D8CE64")
ds.add_table(name="Stores", data_frame=stores_df, update_policy="replace")
ds.add_table(name="Sales", data_frame=sales_df, update_policy="replace")
ds.update()


# In[17]:


from mstrio.project_objects import SuperCube
ds = SuperCube(connection=conn, id="FE86ADA2456BE957F6C951ACB2A7F4B8")
ds.add_table(name="Stores", data_frame=stores_df, update_policy="replace")
ds.add_table(name="Sales", data_frame=sales_df, update_policy="replace")
ds.update()


# In[16]:


#creating attributes and metrics and adding to the report(Creating the dataset)
#category,sales_fmt and location are attributes and store_id,sales are metrics
#store and sales are tables 

import pandas as pd
stores = {"store_id": [1, 2, 3],
          "location": ["New York", "Seattle", "Los Angeles"]}
stores_df = pd.DataFrame(stores, columns=["store_id", "location"])

sales = {"store_id": [1, 2, 3],
         "category": ["TV", "Books", "Accessories"],
         "sales": [400, 200, 100],
         "sales_fmt": ["$400", "$200", "$100"]}
sales_df = pd.DataFrame(sales, columns=["store_id", "category", "sales", "sales_fmt"])

from mstrio.project_objects import SuperCube
ds =  SuperCube(connection=conn, name="region_revenue_icube")
ds.add_table(name="Stores",data_frame=stores_df , update_policy="replace")  #update policy==add,update,replace,upsert(simultaneously
#updates existing data and add new data)
ds.add_table(name="Sales", data_frame=sales_df, update_policy="replace")
SuperCube.update(auto_publish=False)  #creates super cube

# adding data in report is not possible
# https://www.geeksforgeeks.org/python-pandas-dataframe/


# In[23]:


#to see dataframe elements
ds.to_dataframe()


# In[11]:


# to see the attributes and attribute elements in project
ds.attributes

ds.attr_elements


# In[15]:


ds.delete(mstrio report)


# In[17]:


#To delete the cube true means it is forcefully deleted
ds.delete(True)


# In[22]:


# while using report cannot use name argument

import pandas as pd
stores = {"store_id": [1, 2, 3],
          "location": ["New York", "Seattle", "Los Angeles"]}
stores_df = pd.DataFrame(stores, columns=["store_id", "location"])



sales = {"store_id": [1, 2, 3],
         "category": ["TV", "Books", "Accessories"],
         "sales": [400, 200, 100],
         "sales_fmt": ["$400", "$200", "$100"]}
sales_df = pd.DataFrame(sales, columns=["store_id", "category", "sales", "sales_fmt"])


from mstrio.project_objects import Report
ds = Report(connection=conn, name="RB_Report_by_mstrio")
ds.add_table(data_frame=stores_df, update_policy="add")
ds.add_table(data_frame=sales_df, update_policy="add")
ds.create()
# adding data in report is not possible


# In[22]:


import pandas as pd
stores = {"store_id": [1, 2, 3],
          "location": ["New York", "Seattle", "Los Angeles"]}
stores_df = pd.DataFrame(stores, columns=["store_id", "location"])

sales = {"store_id": [1, 2, 3],
         "category": ["TV", "Books", "Accessories"],
         "sales": [400, 200, 100],
         "sales_fmt": ["$400", "$200", "$100"]}
sales_df = pd.DataFrame(sales, columns=["store_id", "category", "sales", "sales_fmt"])

from mstrio.project_objects import OlapCube
ds =  OlapCube(connection=conn, name="olap_cube_mstrio")
ds.add_table(name="Stores", data_frame=stores_df, update_policy="add")  #update policy==add,update,replace,upsert(simultaneously
#updates existing data and add new data)
ds.add_table(name="Sales", data_frame=sales_df, update_policy="add")
ds.create()  #creates super cube



# https://www.geeksforgeeks.org/python-pandas-dataframe/


# In[30]:


from mstrio.project_objects import datasets
class mstrio.project_objects.datasets.cube.CubeStates()


# In[46]:


#To see the report in dataframe 

import pandas as pd 
from pandas import DataFrame     #series and dataframe are two types of pandas
my_report = Report(connection=conn, id="907AB28E4A93F80D71EBF7A0B259B5F6", parallel=False)
my_report_df=my_report.to_dataframe()
my_report_df


# In[47]:


#To see the attribute,metrics and attribute elements in report

from mstrio.project_objects import  Report
from mstrio.connection import get_connection
my_report = Report(connection=conn, id="907AB28E4A93F80D71EBF7A0B259B5F6", parallel=False)
my_report.attributes
my_report.metrics
my_report.attr_elements


# In[4]:


#applying filters in report to see specific attributes(Region),metrics(Cost and Revenue) and attribute elements (for 0 and 1)


from mstrio.project_objects import  Report
from mstrio.connection import get_connection


my_report = Report(connection=conn, id="907AB28E4A93F80D71EBF7A0B259B5F6", parallel=False)
my_report_df=my_report.to_dataframe()
my_report.apply_filters(
    attributes=["8D679D4B11D3E4981000E787EC6DE8A4"],
    metrics=["4C05177011D3E877C000B3B2D86C964F","7FD5B69611D5AC76C000D98A4CC5F24F"],
    attr_elements=["8D679D4B11D3E4981000E787EC6DE8A4:4","8D679D4B11D3E4981000E787EC6DE8A4:5"])


df=my_report.to_dataframe()
df


# In[37]:


from mstrio.project_objects import  Report
from mstrio.connection import get_connection


my_report = Report(connection=conn, id="907AB28E4A93F80D71EBF7A0B259B5F6", parallel=False)
my_report.attributes
my_report.metrics
my_report.attr_elements
df=my_report.to_dataframe()

df


# In[49]:


from mstrio.project_objects import load_cube,OlapCube,SuperCube
from mstrio.connection import get_connection
pid="6D3244C0457C3CC8D541F4B597D8CE64"

My_cube = OlapCube(connection=conn,id=pid)
#my_cube1 = load_cube(connection=conn, cube_id=cube_id)

df=My_cube.to_dataframe()

df


# In[ ]:





# In[76]:


my_report.attr_elements


# In[51]:


from mstrio.connection import get_connection 
conn = get_connection(workstationData, project_name=PROJECT_NAME)

# get cube based on its id and store it in data frame
my_cube = OlapCube(connection=conn, id=CUBE_ID)
my_cube_df = my_cube.to_dataframe()

# get report based on its id and store it in data frame
my_report = Report(connection=conn, id=REPORT_ID, parallel=False)
my_report_df = my_report.to_dataframe


# In[7]:


import pandas as pd 
from mstrio.project_objects.datasets import cube
from mstrio.connection import get_connection 
project_name="MicroStrategy_Tutorial"
Super_Cube_name="region_revenue_icube"
super_cube_id="FE86ADA2456BE957F6C951ACB2A7F4B8"

region={"region_id":[13,14,15]}
region_df=pd.DataFrame(region,columns=["region_id","location"])





# In[12]:


from mstrio.project_objects import load_cube, OlapCube
#my_cube = OlapCube(connection=conn, id=id)
my_cube = load_cube(connection=conn, cube_id="FE86ADA2456BE957F6C951ACB2A7F4B8")
df = my_cube.to_dataframe()
df


# In[1]:


pip install pandas


# In[7]:


import pandas as pd


# In[6]:


pd.__version__


# In[8]:


import pandas as pd
stores = {"store_id": [1, 2, 3],
          "location": ["New York", "Seattle", "Los Angeles"]}
stores_df = pd.DataFrame(stores, columns=["store_id", "location"])

ds.add_table(name="Sales", data_frame=sales_df, update_policy="replace")

from mstrio.project_objects import SuperCube
ds = SuperCube(connection=conn, name="Store Analysis")
ds.add_table(name="Stores", data_frame=stores_df, update_policy="replace")
ds.create()


# In[3]:


import pandas as pd
stores = {"store_id": [1, 2, 3],
          "location": ["New York", "Seattle", "Los Angeles"]}
stores_df = pd.DataFrame(stores, columns=["store_id", "location"])



sales = {"store_id": [1, 2, 3],
         "category": ["TV", "Books", "Accessories"],
         "sales": [400, 200, 100],
         "sales_fmt": ["$400", "$200", "$100"]}
sales_df = pd.DataFrame(sales, columns=["store_id", "category", "sales", "sales_fmt"])


from mstrio.project_objects import SuperCube
ds = SuperCube(connection=conn, name="mstrio cube_2")
ds.add_table(name="Stores", data_frame=stores_df, update_policy="replace")
ds.add_table(name="Sales", data_frame=sales_df, update_policy="replace")
ds.create()
df=ds.to_dataframe()
df


# In[9]:


x=df


# In[10]:


#selecting a column from complete grid 

cat=df[["location"]]
cat


# In[11]:


#Exporting single column into microstrategy


from mstrio.project_objects import SuperCube
ds = SuperCube(connection=conn, name="Category")
ds.add_table(name="Category", data_frame=cat, update_policy="replace")
ds.create()


# In[5]:


#To see first row from grid


x=cat.loc[0]
x


# In[12]:


df


# In[13]:


#Deleting one column from dataframe
del df["sales"]


# In[14]:


df


# In[15]:


#when we import external data into microstrategy then we use to_dataframe and if we use dataframe then we are using the 
#data that is already imported


import pandas as pd
data={"name":["ruchir","piyush","arvind","a","b","c","d","e","f"],"age":[22,30,33,1,2,3,4,5,6]}
df1=pd.DataFrame(data,columns=["name","age"])
df1


# In[16]:


#df1.insert(1,"new4",df["location"])
df2=df1
df2


# In[96]:


del df1["new3"]


# In[24]:


df1


# In[98]:


#To check the null value 
df1.isnull()


# In[20]:


print(df1.loc[0:4, 'name'])


# In[22]:


print(df1.iloc[0:4, 0:4])


# In[23]:


df1


# In[ ]:





# In[ ]:





# In[ ]:





# In[68]:


df


# In[26]:


x=ds.to_dataframe()
x


# In[28]:


x.head(5)


# In[3]:


from mstrio.connection import get_connection
from mstrio.modeling.schema import (
    Attribute,
    AttributeDisplays,
    AttributeForm,
    AttributeSort,
    AttributeSorts,
    DataType,
    FormReference,
    list_attributes,
    ObjectSubType,
    Relationship,
    SchemaManagement,
    SchemaObjectReference,
    SchemaUpdateType
)


# In[53]:


from mstrio.server import compare_project_settings, Environment, Project
from mstrio.connection import get_connection

PROJECT_NAME = "MicroStrategy_Tutorial"
NODE_NAME = "NICESS-LP295"

env = Environment(connection=conn)

all_projects = env.list_projects()
print(all_projects)
loaded_projects = env.list_loaded_projects()
print(loaded_projects)


# In[21]:


project = Project(connection=conn, name="MicroStrategy_Tutorial")


# In[22]:


#loading unloading of project
project.load(on_nodes="NICESS-LP295")


# In[26]:


project_settings_df = project.settings.to_dataframe()


# In[24]:


#Create New Project
new_project = env.create_project(name="By mstrio project", description="Hey all this project is created using mstrio by me")


# In[28]:


new_project.alter(description="Hey this project is created by Ruchir")


# In[57]:


project1=Project(connection=conn,name="MicroStrategy_Tutorial")
project2=Project(connection=conn,name="Project_1")
df_cmp = compare_project_settings(projects=[By mstrio project, MicroStrategy_Tutorial, Project_1], show_diff_only=True)


# In[39]:


#Schema Management
from mstrio.modeling.schema import SchemaManagement, SchemaLockType, SchemaUpdateType

from mstrio.connection import get_connection

PROJECT_NAME = "MicroStrategy_Tutorial"  # Project to connect to



# create an object to manage the schema
schema_mgmt = SchemaManagement(conn)



# In[37]:


lock_t = schema_mgmt.lock_type
lock_st = schema_mgmt.get_lock_status()


# In[40]:


from mstrio.connection import get_connection
from mstrio.modeling.schema import (
    Attribute,
    AttributeDisplays,
    AttributeForm,
    AttributeSort,
    AttributeSorts,
    DataType,
    FormReference,
    list_attributes,
    ObjectSubType,
    Relationship,
    SchemaManagement,
    SchemaObjectReference,
    SchemaUpdateType
)


# In[42]:


from mstrio.modeling.expression import (
    Expression,
    Token,
    ColumnReference,
    Constant,
    Operator,
    FactExpression,
    Variant,
    VariantType,
    Function
)


# In[43]:


from workflows.get_all_columns_in_table import list_table_columns


# In[45]:


PROJECT_NAME = "MicroStrategy_Tutorial"  # Insert name of project here
ATTRIBUTE_NAME = "Customer" # Insert name of edited attribute here
ATTRIBUTE_ID = "8D679D3C11D3E4981000E787EC6DE8A4"  # Insert ID of edited attribute here
ATTRIBUTE_NEW_NAME = "Call Ctr_RB"  # Insert new name of edited attribute here
ATTRIBUTE_DESCRIPTION = "Created By RB"  # Insert new description of edited attribute here
TABLE_NAME = "CITY_CTR_SLS"  # Insert table name here
ATTRIBUTE_FORM_NAME = "CALL_CTR_ID"   # Insert attribute form name here
#ATTRIBUTE_FORM_ALTERED_NAmE = $attribute_form_altered_name  # Insert altered attribute form name here
ATTRIBUTE_FORM_DESCRIPTION = "NUll"  # Insert altered attribute form description here
FOLDER_ID = "E28C9AF4446638AF73612FA24E300E41" 


# In[46]:


table_columns = list_table_columns(conn)


# In[50]:


ATTRIBUTE_DATA = {
    'name': "Call Ctr_RB",
    'sub_type': ObjectSubType.ATTRIBUTE,
    'destination_folder': "E28C9AF4446638AF73612FA24E300E41",
    'forms': [
        AttributeForm.local_create(
            conn,
            name='ID',
            alias='day_date',
            category='ID',
            display_format=AttributeForm.DisplayFormat.ID,
            data_type=DataType(
                type=ID.Type.TIME_STAMP,
                precision=8,
                scale=-2147483648,
            ),


# In[51]:


list_of_all_atrs = list_attributes(connection=conn)


# In[6]:


from mstrio.connection import get_connection
from mstrio.project_objects.dossier import (
    Dossier,
    list_dossiers,
    list_dossiers_across_projects
)


# In[7]:


PROJECT_ID = "B19DEDCC11D4E0EFC000EB9495D0F44F" # Insert project ID here
PROJECT_NAME = "MicroStrategy_Tutorial"  # Insert name of project here
DOSSIER_NAME = "sales revenue_dossier"  # Insert name of the Dossier here


# In[8]:


#List of all dossiers
# Dossier management
# List dossiers with different conditions
list_of_all_dossiers = list_dossiers(connection=conn)
print(list_of_all_dossiers)


# In[10]:


#To see the dossiers information in dictionaries 
#type=55 meaning DssTypeDocumentDefinition (An document built from reports and HTML text (Report Services Documents))
list_of_all_dossiers_as_dict = list_dossiers(connection=conn, to_dictionary=True)
print(list_of_all_dossiers_as_dict)


# In[11]:


#To see all dossiers as dataframes

list_of_all_dossiers_as_dataframes = list_dossiers(connection=conn, to_dataframe=True)
print(list_of_all_dossiers_as_dataframes)


# In[10]:


list_of_dossiers_by_project_id = list_dossiers(connection=conn, project_id="B19DEDCC11D4E0EFC000EB9495D0F44F")
print(list_of_dossiers_by_project_id)


# In[9]:


list_of_dossiers_by_name = list_dossiers(connection=conn, name=DOSSIER_NAME)
print(list_of_dossiers_by_name)


# In[24]:


DOSSIER_ID = "8D939FEA480B7C358E1576B06DAB1E37"  # Insert ID of Dossier on which you want to perform actions

# Get single dossier by its id
dossier = Dossier(connection=conn, id="8D939FEA480B7C358E1576B06DAB1E37")

# List dossier properties
properties = dossier.list_properties()
print(properties)

# Delete dossier without prompt


# In[11]:


dossier=Dossier(conn,id="8D939FEA480B7C358E1576B06DAB1E37")


# In[12]:


dossier.name


# In[15]:


print(Dossier.alter.__doc__)


# In[17]:


NEW_DOSSIER_NAME = "New Dossier_RB"  # Insert old name of edited dossier here
NEW_DOSSIER_DESCRIPTION = "This dossier is used for altering purpose in MSTRIO By Ruchir"  # Insert new description of edited dossier here
FOLDER_ID = "E28C9AF4446638AF73612FA24E300E41"  # Insert folder ID here

# Alter dossier to change the name of newly created dossier
dossier.alter(name="New Dossier_RB_mstrio") #Insert new name of dossier here
dossier.alter(description="New Dossier created by ruchir for alter ")



# In[18]:


print(dossier.__init__.__doc__)


# In[21]:


#To see the info of dossier publishing

print(dossier.publish.__doc__)


# In[27]:


#To Publish the Dossier to current users library
#This is the demo script to show how administrator can manage documents and
dossiers in users' libraries.
dossier.publish()


# In[28]:


#To Publish the Dossier to recipient library for specific users(Specify it in List format)
#sharing one dossier/document to a given user(s) by passing user ID
dossier.publish(["E96A7BBD11D4BBCE10004694316DE8A4","4E70890241DBB18E6CA1D8B850952A68","02BBDAC94037C34BCBD3398A2E38D2B1"])


# In[26]:


#Dossier Unpublish

dossier.unpublish()


# In[ ]:


#Dossier Unpublishing for specific users

dossier.unpublish(["E96A7BBD11D4BBCE10004694316DE8A4","02BBDAC94037C34BCBD3398A2E38D2B1"])


# In[32]:


print(inspect.getsource(Dossier.share_to))


# In[33]:


print(Dossier.share_to.__doc__)


# In[ ]:


#To share with user(UserID)

dossier.share_to(["16CF62B048A4175CBD2D4CB1D71DC61D"])


# In[20]:


print(Report.__init__.__doc__)


# In[18]:


dossier.delete(force=True)


# In[34]:


USER_ID = "16CF62B048A4175CBD2D4CB1D71DC61D"
dossier.share_to(users="16CF62B048A4175CBD2D4CB1D71DC61D")




# In[36]:


#Dossier in Library of user
library.dossiers


# In[37]:


#No Report Service Documents in Library 
library.documents


# In[38]:


library.contents


# In[28]:


schedules = dossier.list_available_schedules()
print(schedules)


# In[31]:


cubes = dossier.get_connected_cubes()
print(cubes)


# In[33]:


CACHE_ID = "5B12BC3A43C797A903B0EDABABD1B188"  # Insert ID of cache on which you want to perform actions
#OTHER_CACHE_ID = $other_cache_id  # Insert ID of cache on which you want to perform actions
CACHE_STATUS = "Ready, Loaded, Filed" # Insert cache status here
#USER_NAME = $user_name # Insert user name here


# In[1]:


doss = dossier(connection=conn, name="sales revenue dossier _with prompt_1")


# In[35]:


list_of_all_dossier_cache = dossier.list_caches(connection=conn)
print(list_of_all_dossier_cache)


# In[36]:


def show_caches_status():
    caches = Dossier.list_caches(conn)
    for cache in caches:
        print(f'Cache ID: {cache.id}, {cache.status}')


# In[39]:


cache = Dossier.list_caches(connection=conn)[0]
properties = cache.list_properties()
print(properties)


# In[40]:


from mstrio.modeling.schema import (
     Attribute,
     List_attributes
)
from mstrio.modelling.schema import(
     metric,
    List_metrics)


# In[1]:


get_connected_cubes()


# In[22]:


mstrio.project_objects.report.Report(connection: conn, id:"710A20E74EFDAA35C5C32D8DDDB2B3B7" ,  
parallel: bool = True, progress_bar: bool = True)


# In[34]:


mstrio.project_objects.document.Document(connection: conn, name: 
                                               'dashboard_1', id: 0675EB5C4F2B7CF5F40056B657CC45F6)


# In[35]:


print(list[mstrio.project_objects.datasets.super_cube.SuperCube or mstrio.project_objects.datasets.olap_cube.OlapCube])


# In[40]:


from mstrio.connection import Connection
from mstrio.connection import get_connection
mstrio.project_objects.dossier.list_dossiers_across_projects(Connection: conn, 
to_dictionary: bool = False, to_dataframe: bool = False) → list['Dossier'] | list[dict] | pandas.core.frame.DataFrame


# In[4]:


conn = conn.get_folder_contents()
print("There are %s folders in the base folder" % len(base_folder_contents))

folder_contents = conn.get_folder_contents(folder_id='D3C7D461F69C4610AA6BAA5EF51F4125')
for f in folder_contents:
    print('Folder: name - %s description - %s guid - %s type - %s' % (f['name'], f['description'], f['id'], f['type']))


# In[2]:


pip install mstrio


# In[1]:


type_object=55         #55 is document/dossier and 3 is report/cube


# In[3]:


from mstrio.project_objects import get_cube
get_cube("95C113424F0DBA3971CE15AE256BFC03")


# In[4]:


from mstrio.project_objects.datasets.super_cube import SuperCube


# In[5]:


search_result=quicksearch(conn)


# In[6]:


import csv


# In[4]:


import openrouteservice as ors
import folium
import credentials
import pandas as pd
import csv


# In[9]:


import openrouteservice as ors

client=ors.client(key=credentials.ors_key)


profile="foot-walking"
range_m=[600]
smoothing=25
range_type='time'
isochrone=client.isochrones(locations=coordinates,range_type=range_type,range=range_m,profile=profile,smoothing=smoothing,attributes=['total_prop','area'])


# In[11]:


from mstrio import microstrategy


# In[18]:


import mstrio
report_dataframe=conn.get_report(report_id="B4C6D8D642E4438114F2A08CF420FBD1")


# In[17]:


from mstrio import microstrategy
cube_dataframe=conn.get_cube(cube_id="6D3244C0457C3CC8D541F4B597D8CE64")


# In[20]:


dir(mstrio)


# In[21]:





# In[1]:


import seaborn as sns


# In[3]:


import matplotlib.pyplot as plt


# In[4]:


sns.distplot([0,1,2,3,4,5])
plt.show()


# In[5]:


import matplotlib.pyplot as plt
import seaborn as sns

sns.distplot([0, 1, 2, 3, 4, 5], hist=False)

plt.show()


# In[10]:


# importing the modules
import numpy as np
import seaborn as sn
import matplotlib.pyplot as plt
  
# generating 2-D 10x10 matrix of random numbers
# from 1 to 100
data = np.random.randint(low = 1,
                         high = 100,
                         size = (10, 10))
print("The data to be plotted:\n")
print(data)
  
# plotting the heatmap
hm = sn.heatmap(data = data)
  
# displaying the plotted heatmap
plt.show()


# In[38]:


df


# In[40]:


sns.displot(df['Region'])
sns.displot(df['Revenue'])


# In[41]:


result=df.pivot(index="Revenue",columns="Profit",values="Cost")
sns.heatmap(result,annot=True,fmt="g",cmap="viridis")
plt.show()


# In[42]:


df


# In[7]:


from mstrio.server import compare_project_settings,Environment,Project
env=Environment(connection=conn)


# In[5]:


# To see all projects available 
all_projects=env.list_projects()
all_projects


# In[6]:


loaded_projects=env.list_loaded_projects()
loaded_projects


# In[9]:


project_settings_df=compare_project_settings.to_dataframe()


# In[10]:


project=Project(connection=conn,name="MicroStrategy_Tutorial")


# In[11]:


#To see the project setings and compare the project setting we need rest api which is supported in version 11.3 and our i server is 11.2 
project.settings.to_csv(name=CSV_FILE_EXPORT)


# In[5]:


from mstrio.project_objects import Report
my_report = Report(connection=conn, report_id='0FDED5D94115EC5036FE9EA6FDE87C08', parallel=False)
df = my_report.to_dataframe()


# In[17]:


df


# In[8]:


from mstrio.connection import get_connection
from mstrio.modeling import (
    DataType,
    Metric,
    MetricFormat,
    ObjectSubType,
    SchemaManagement,
    SchemaObjectReference,
    SchemaUpdateType
)
from mstrio.modeling.expression import Expression, Token


# In[ ]:




